USE [master]
GO

/****** Object:  Database [Pharmacy]    Script Date: 2023-10-22 10:33:40 AM ******/
CREATE DATABASE [Pharmacy]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Pharmacy', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MOMENTUM\MSSQL\DATA\Pharmacy.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'Pharmacy_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MOMENTUM\MSSQL\DATA\Pharmacy_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Pharmacy].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [Pharmacy] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [Pharmacy] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [Pharmacy] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [Pharmacy] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [Pharmacy] SET ARITHABORT OFF 
GO

ALTER DATABASE [Pharmacy] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [Pharmacy] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [Pharmacy] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [Pharmacy] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [Pharmacy] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [Pharmacy] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [Pharmacy] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [Pharmacy] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [Pharmacy] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [Pharmacy] SET  DISABLE_BROKER 
GO

ALTER DATABASE [Pharmacy] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [Pharmacy] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [Pharmacy] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [Pharmacy] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [Pharmacy] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [Pharmacy] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [Pharmacy] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [Pharmacy] SET RECOVERY SIMPLE 
GO

ALTER DATABASE [Pharmacy] SET  MULTI_USER 
GO

ALTER DATABASE [Pharmacy] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [Pharmacy] SET DB_CHAINING OFF 
GO

ALTER DATABASE [Pharmacy] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [Pharmacy] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [Pharmacy] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [Pharmacy] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO

ALTER DATABASE [Pharmacy] SET QUERY_STORE = OFF
GO

ALTER DATABASE [Pharmacy] SET  READ_WRITE 
GO


 

-- Users Table
CREATE TABLE Users (
  UserId INT PRIMARY KEY IDENTITY,
  Name VARCHAR(100),
  Email VARCHAR(100),
  Role VARCHAR(50),
  CreatedDate DATETIME DEFAULT GETDATE(),
  CreatedBy VARCHAR(50),
  LastModified DATETIME,
  LastModifiedBy VARCHAR(50)
);

-- Drugs Table
CREATE TABLE Drugs (
  DrugId INT PRIMARY KEY IDENTITY,
  Name VARCHAR(100),
  Description VARCHAR(255),
  Stock INT,
  CreatedDate DATETIME DEFAULT GETDATE(),
  CreatedBy VARCHAR(50),
  LastModified DATETIME,
  LastModifiedBy VARCHAR(50)
);

-- Orders Table
CREATE TABLE Orders (
  OrderId INT PRIMARY KEY IDENTITY,
  UserId INT,
  CreatedDate DATETIME DEFAULT GETDATE(),
  CreatedBy VARCHAR(50),
  LastModified DATETIME,
  LastModifiedBy VARCHAR(50),
  FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

-- DrugOrder Table
CREATE TABLE DrugOrder (
  OrderId INT,
  DrugId INT,
  Quantity INT,
  FOREIGN KEY (OrderId) REFERENCES Orders(OrderId),
  FOREIGN KEY (DrugId) REFERENCES Drugs(DrugId)
);

OnlinePharmacy.Data Implementation

/// <summary>
/// Generic repository interface for CRUD operations.
/// </summary>
/// <typeparam name="T">Entity type.</typeparam>
public interface IRepository<T>
{
    /// <summary>
    /// Fetches all records asynchronously.
    /// </summary>
    /// <returns>A list of all records.</returns>
    Task<IEnumerable<T>> GetAllAsync();

    /// <summary>
    /// Fetches a single record by its ID asynchronously.
    /// </summary>
    /// <param name="id">The ID of the record.</param>
    /// <returns>The record if found; otherwise, null.</returns>
    Task<T> GetByIdAsync(int id);

    /// <summary>
    /// Creates a new record asynchronously.
    /// </summary>
    /// <param name="entity">The new entity.</param>
    /// <returns>Task.</returns>
    Task CreateAsync(T entity);

    /// <summary>
    /// Updates an existing record asynchronously.
    /// </summary>
    /// <param name="entity">The updated entity.</param>
    /// <returns>Task.</returns>
    Task UpdateAsync(T entity);

    /// <summary>
    /// Deletes a record by its ID asynchronously.
    /// </summary>
    /// <param name="id">The ID of the record.</param>
    /// <returns>Task.</returns>
    Task DeleteAsync(int id);
}

/// <summary>
/// Repository for User entity.
/// </summary>
public class UserRepository : IRepository<User>
{
    private readonly string _connectionString;

    /// <summary>
    /// Initializes a new instance of the UserRepository class.
    /// </summary>
    /// <param name="connectionString">The database connection string.</param>
    public UserRepository(string connectionString)
    {
        _connectionString = connectionString;
    }

    /// <inheritdoc />
    public async Task<IEnumerable<User>> GetAllAsync()
    {
        // Implementation as in your original code, now with XML comments.
    }

    /// <inheritdoc />
    public async Task<User> GetByIdAsync(int id)
    {
        // Implementation
    }

    /// <inheritdoc />
    public async Task CreateAsync(User entity)
    {
        // Implementation
    }

    /// <inheritdoc />
    public async Task UpdateAsync(User entity)
    {
        // Implementation
    }

    /// <inheritdoc />
    public async Task DeleteAsync(int id)
    {
        // Implementation
    }
}


/// <summary>
/// Repository for Drug entity.
/// </summary>
public class DrugRepository : IRepository<Drug>
{
    // Similar to UserRepository
}

/// <summary>
/// Repository for Order entity.
/// </summary>
public class OrderRepository : IRepository<Order>
{
    // Similar to UserRepository
}


/// <summary>
/// Repository for Order entity.
/// </summary>
public class OrderRepository : IRepository<Order>
{
    // Similar to UserRepository
}


OnlinePharmacy.Web Implementation

/// <summary>
/// Base API controller for all entity types.
/// </summary>
/// <typeparam name="T">Entity type.</typeparam>
[ApiController]
public class BaseController<T> : ControllerBase where T : class
{
    private readonly IRepository<T> _repository;

    /// <summary>
    /// Initializes a new instance of the BaseController class.
    /// </summary>
    /// <param name="repository">Repository for the entity type.</param>
    public BaseController(IRepository<T> repository)
    {
        _repository = repository;
    }

    /// <summary>
    /// Gets all entities.
    /// </summary>
    /// <returns>List of entities.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var entities = await _repository.GetAllAsync();
        return Ok(entities);
    }

    /// <summary>
    /// Gets an entity by ID.
    /// </summary>
    /// <param name="id">Entity ID.</param>
    /// <returns>Entity if found; otherwise, NotFound.</returns>
    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        var entity = await _repository.GetByIdAsync(id);
        if (entity == null)
        {
            return NotFound();
        }
        return Ok(entity);
    }

    // Implement other CRUD operations (Create, Update, Delete)
}


public class UsersController : BaseController<User>
{
    private readonly ILogger<UsersController> _logger;

    public UsersController(IRepository<User> userRepository, ILogger<UsersController> logger) : base(userRepository)
    {
        _logger = logger;
    }

    [HttpGet]
    public override async Task<IActionResult> GetAllAsync()
    {
        _logger.LogInformation("Fetching all users");
        return await base.GetAllAsync();
    }
}

/// <summary>
/// Utility class for handling JSON Web Tokens (JWT).
/// </summary>
public class JwtUtility
{
    private readonly string _secretKey;

    /// <summary>
    /// Initializes a new instance of the JwtUtility class.
    /// </summary>
    /// <param name="secretKey">The secret key for signing the token.</param>
    public JwtUtility(string secretKey)
    {
        _secretKey = secretKey;
    }

    /// <summary>
    /// Generates a new JWT for a given user.
    /// </summary>
    /// <param name="user">The user for whom to generate the token.</param>
    /// <returns>A new JWT.</returns>
    public string GenerateToken(User user)
    {
        // Existing implementation
    }

    /// <summary>
    /// Validates a given JWT.
    /// </summary>
    /// <param name="token">The JWT to validate.</param>
    /// <returns>true if the token is valid; otherwise, false.</returns>
    public bool ValidateToken(string token)
    {
        // Existing implementation
    }
}

/// <summary>
/// Generic base API controller.
/// </summary>
/// <typeparam name="T">The type of the entity.</typeparam>
[ApiController]
public class BaseController<T> : ControllerBase where T : class
{
    private readonly IRepository<T> _repository;

    /// <summary>
    /// Initializes a new instance of the BaseController class.
    /// </summary>
    /// <param name="repository">The repository.</param>
    public BaseController(IRepository<T> repository)
    {
        _repository = repository;
    }

    /// <summary>
    /// Gets all entities.
    /// </summary>
    /// <returns>A list of all entities.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var entities = await _repository.GetAllAsync();
        return Ok(entities);
    }

    // Other CRUD methods like GetById, Create, Update, Delete
}


?????????
/// <summary>
/// Custom logger interface for the application.
/// </summary>
public interface ILogger
{
    /// <summary>
    /// Logs informational messages.
    /// </summary>
    /// <param name="message">The message to log.</param>
    void Info(string message);

    /// <summary>
    /// Logs warnings.
    /// </summary>
    /// <param name="message">The message to log.</param>
    void Warn(string message);

    /// <summary>
    /// Logs errors.
    /// </summary>
    /// <param name="message">The message to log.</param>
    void Error(string message);
}

/// <summary>
/// Simple logger that writes logs to the console.
/// </summary>
public class SimpleLogger : ILogger
{
    /// <summary>
    /// Logs informational messages.
    /// </summary>
    /// <param name="message">The message to log.</param>
    public void Info(string message)
    {
        Console.WriteLine($"[INFO] {message}");
    }

    /// <summary>
    /// Logs warnings.
    /// </summary>
    /// <param name="message">The message to log.</param>
    public void Warn(string message)
    {
        Console.WriteLine($"[WARN] {message}");
    }

    /// <summary>
    /// Logs errors.
    /// </summary>
    /// <param name="message">The message to log.</param>
    public void Error(string message)
    {
        Console.WriteLine($"[ERROR] {message}");
    }
}

Data Access Layer (DAL) Implementation

/// <summary>
/// Interface for Unit of Work pattern.
/// </summary>
public interface IUnitOfWork : IDisposable
{
    /// <summary>
    /// Get repository for a specific entity type.
    /// </summary>
    /// <typeparam name="T">Entity type.</typeparam>
    /// <returns>Repository for the entity type.</returns>
    IRepository<T> Repository<T>() where T : class;

    /// <summary>
    /// Save changes to the database.
    /// </summary>
    void Save();
}

/// <summary>
/// Unit of Work class to manage transactions.
/// </summary>
public class UnitOfWork : IUnitOfWork
{
    private readonly SqlConnection _connection;
    private readonly Dictionary<Type, object> _repositories;

    /// <summary>
    /// Initializes a new instance of the UnitOfWork class.
    /// </summary>
    /// <param name="connectionString">The database connection string.</param>
    public UnitOfWork(string connectionString)
    {
        _connection = new SqlConnection(connectionString);
        _repositories = new Dictionary<Type, object>();
    }

    /// <summary>
    /// Get repository for a specific entity type.
    /// </summary>
    /// <typeparam name="T">Entity type.</typeparam>
    /// <returns>Repository for the entity type.</returns>
    public IRepository<T> Repository<T>() where T : class
    {
        // Implementation
    }

    /// <summary>
    /// Save changes to the database.
    /// </summary>
    public void Save()
    {
        // Implementation
    }

    /// <summary>
    /// Dispose resources.
    /// </summary>
    public void Dispose()
    {
        _connection.Dispose();
    }
}



??? SERVICE LAYER ??

/// <summary>
/// Service interface for User operations.
/// </summary>
public interface IUserService
{
    /// <summary>
    /// Get all Users.
    /// </summary>
    /// <returns>A list of all Users.</returns>
    Task<IEnumerable<User>> GetAllUsersAsync();

    // Other methods for CRUD operations
}

/// <summary>
/// User Service implementation for handling business logic related to Users.
/// </summary>
public class UserService : IUserService
{
    private readonly IRepository<User> _userRepository;

    /// <summary>
    /// Initializes a new instance of the UserService class.
    /// </summary>
    /// <param name="userRepository">The User repository.</param>
    public UserService(IRepository<User> userRepository)
    {
        _userRepository = userRepository;
    }

    /// <summary>
    /// Get all Users.
    /// </summary>
    /// <returns>A list of all Users.</returns>
    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        return await _userRepository.GetAllAsync();
    }

    // Implement other CRUD operations
}

/// <summary>
/// User Service implementation with logging.
/// </summary>
public class UserServiceWithLogging : IUserService
{
    private readonly IRepository<User> _userRepository;
    private readonly ILogger<UserServiceWithLogging> _logger;

    /// <summary>
    /// Initializes a new instance of the UserServiceWithLogging class.
    /// </summary>
    /// <param name="userRepository">The User repository.</param>
    /// <param name="logger">The logger.</param>
    public UserServiceWithLogging(IRepository<User> userRepository, ILogger<UserServiceWithLogging> logger)
    {
        _userRepository = userRepository;
        _logger = logger;
    }

    /// <summary>
    /// Get all Users.
    /// </summary>
    /// <returns>A list of all Users.</returns>
    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        _logger.LogInformation("Getting all users.");
        var users = await _userRepository.GetAllAsync();
        _logger.LogInformation($"Retrieved {users.Count()} users.");
        return users;
    }

    // Implement other CRUD operations with logging
}

/// <summary>
/// Generic BaseController for handling common CRUD operations.
/// </summary>
/// <typeparam name="T">The type of entity.</typeparam>
public class BaseController<T> : ControllerBase where T : class
{
    private readonly IRepository<T> _repository;

    /// <summary>
    /// Initializes a new instance of the BaseController class.
    /// </summary>
    /// <param name="repository">The generic repository.</param>
    public BaseController(IRepository<T> repository)
    {
        _repository = repository;
    }

    /// <summary>
    /// Get all entities of type T.
    /// </summary>
    /// <returns>A list of all entities of type T.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var entities = await _repository.GetAllAsync();
        return Ok(entities);
    }

    // Implement other CRUD operations
}

/// <summary>
/// User Controller inheriting from BaseController<User>.
/// </summary>
[ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/users")]
[ApiController]
public class UsersControllerV1 : BaseController<User>
{
    /// <summary>
    /// Initializes a new instance of the UsersControllerV1 class.
    /// </summary>
    /// <param name="userRepository">The User repository.</param>
    public UsersControllerV1(IRepository<User> userRepository) : base(userRepository)
    {
    }

    // Additional custom methods specific to User
}

/// <summary>
/// Generic BaseController with logging.
/// </summary>
/// <typeparam name="T">The type of entity.</typeparam>
public class BaseControllerWithLogging<T> : BaseController<T> where T : class
{
    private readonly ILogger _logger;

    /// <summary>
    /// Initializes a new instance of the BaseControllerWithLogging class.
    /// </summary>
    /// <param name="repository">The generic repository.</param>
    /// <param name="logger">The logger.</param>
    public BaseControllerWithLogging(IRepository<T> repository, ILogger<BaseControllerWithLogging<T>> logger) : base(repository)
    {
        _logger = logger;
    }

    /// <summary>
    /// Get all entities of type T.
    /// </summary>
    /// <returns>A list of all entities of type T.</returns>
    [HttpGet]
    public override async Task<IActionResult> GetAll()
    {
        _logger.LogInformation($"Getting all entities of type {typeof(T).Name}.");
        var entities = await base.GetAll();
        _logger.LogInformation($"Retrieved {((List<T>)entities).Count} entities of type {typeof(T).Name}.");
        return entities;
    }

    // Implement other CRUD operations with logging
}

/// <summary>
/// Unit tests for UserRepository.
/// </summary>
[TestClass]
public class UserRepositoryTests
{
    /// <summary>
    /// Test for GetAllAsync method.
    /// </summary>
    [TestMethod]
    public void TestGetAllAsync()
    {
        // Arrange: Setup your objects and expected outcomes

        // Act: Run the method under test

        // Assert: Verify the outcome
    }

    // Implement other test methods
}

/// <summary>
/// Generic BaseController for handling common CRUD operations.
/// </summary>
/// <typeparam name="T">The type of entity.</typeparam>
public class BaseController<T> : ControllerBase where T : class
{
    // ... existing code

    /// <summary>
    /// Get all entities of type T.
    /// </summary>
    /// <returns>A list of all entities of type T.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        try
        {
            var entities = await _repository.GetAllAsync();
            return Ok(entities);
        }
        catch (Exception ex)
        {
            // Log the exception
            return StatusCode(500, "Internal server error");
        }
    }

    // Implement other CRUD operations with error handling
}

/// <summary>
/// Retrieves all User entities from the database using a stored procedure.
/// </summary>
/// <returns>List of all Users.</returns>
public async Task<IEnumerable<User>> GetAllAsync()
{
    List<User> users = new List<User>();
    using (SqlConnection con = new SqlConnection(connectionString))
    {
        await con.OpenAsync();
        using (SqlCommand cmd = new SqlCommand("usp_GetAllUsers", con))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            SqlDataReader rdr = await cmd.ExecuteReaderAsync();
            while (await rdr.ReadAsync())
            {
                User user = new User
                {
                    UserId = Convert.ToInt32(rdr["UserId"]),
                    Name = rdr["Name"].ToString(),
                    Email = rdr["Email"].ToString(),
                    Role = rdr["Role"].ToString()
                };
                users.Add(user);
            }
        }
    }
    return users;
}

/// <summary>
/// MemoryCache for storing frequently accessed Users.
/// </summary>
public class UserCache
{
    private MemoryCache _cache = new MemoryCache(new MemoryCacheOptions());

    /// <summary>
    /// Tries to get a User from cache, fetches from database if not found.
    /// </summary>
    /// <param name="id">The User ID.</param>
    /// <param name="user">The User entity.</param>
    /// <returns>True if User was found in cache, false otherwise.</returns>
    public bool TryGetUser(int id, out User user)
    {
        // ... existing code
    }

    // Implement methods to set, update, and remove users in cache
}

/// <summary>
/// Logger for system activities.
/// </summary>
public class SystemLogger
{
    /// <summary>
    /// Logs an informational message.
    /// </summary>
    /// <param name="message">The message to log.</param>
    public void LogInfo(string message)
    {
        // Implement logging logic
    }

    /// <summary>
    /// Logs an error message.
    /// </summary>
    /// <param name="message">The error message.</param>
    public void LogError(string message)
    {
        // Implement logging logic
    }

    // Implement other logging levels
}

/// <summary>
/// Controller for managing Users, API version 1.0
/// </summary>
[ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/users")]
[ApiController]
public class UsersControllerV1 : ControllerBase
{
    private readonly IRepository<User> userRepository;

    /// <summary>
    /// Constructor for dependency injection.
    /// </summary>
    /// <param name="userRepository">The user repository.</param>
    public UsersControllerV1(IRepository<User> userRepository)
    {
        this.userRepository = userRepository;
    }

    /// <summary>
    /// Gets all users.
    /// </summary>
    /// <returns>A list of all users.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAllUsers()
    {
        var users = await userRepository.GetAllAsync();
        return Ok(users);
    }

    // Implement other CRUD operations
}

/// <summary>
/// Base controller for common CRUD operations.
/// </summary>
/// <typeparam name="T">The entity type.</typeparam>
public class BaseController<T> : ControllerBase where T : class
{
    protected readonly IRepository<T> repository;

    /// <summary>
    /// Constructor for dependency injection.
    /// </summary>
    /// <param name="repository">The generic repository.</param>
    public BaseController(IRepository<T> repository)
    {
        this.repository = repository;
    }

    /// <summary>
    /// Gets all entities of type T.
    /// </summary>
    /// <returns>A list of all entities of type T.</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var entities = await repository.GetAllAsync();
        return Ok(entities);
    }

    // Implement other CRUD operations
}

/// <summary>
/// Service for logging.
/// </summary>
public class LoggingService
{
    /// <summary>
    /// Logs an informational message.
    /// </summary>
    /// <param name="message">The message to log.</param>
    public void LogInfo(string message)
    {
        // Log the message
    }

    /// <summary>
    /// Logs a warning message.
    /// </summary>
    /// <param name="message">The warning message to log.</param>
    public void LogWarning(string message)
    {
        // Log the warning message
    }

    /// <summary>
    /// Logs an error message.
    /// </summary>
    /// <param name="message">The error message to log.</param>
    public void LogError(string message)
    {
        // Log the error message
    }
}
